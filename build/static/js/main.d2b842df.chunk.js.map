{"version":3,"sources":["Test.js","firebase.js","Message.js","App.js","serviceWorker.js","index.js"],"names":["Component","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","Message","props","authUser","psr","userName","className","message","App","useState","input","setInput","setMessage","setUserName","useEffect","prompt","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","direction","bgcolor","text","placeholder","onChange","event","target","value","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","disabled","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"0TAEmBA,Y,eCaJC,EAbKC,IAASC,cAAc,CACzCC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGMC,Y,MCARC,MAVf,SAAkBC,GACjB,IAAMC,EAAWD,EAAME,MAAQF,EAAMG,SACrC,OACC,yBAAKC,UAAY,QAChB,yBAAKA,UAAWH,EAAW,QAAU,SACpC,2BAAG,2BAAID,EAAMG,UAAb,MAA6B,2BAAG,6BAAMH,EAAMK,cCiDjCC,MAlDf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEiBF,mBAAS,IAF1B,mBAENF,EAFM,KAEGK,EAFH,OAGmBH,mBAAS,IAH5B,mBAGNJ,EAHM,KAGIQ,EAHJ,KA0Bb,OArBAC,qBAAU,WACRD,EAAYE,OAAO,0BACnB,IAEFD,qBAAU,WAERzB,EAAG2B,WAAW,WAAWC,QAAQ,YAAa,OAAOC,YAAW,SAAAC,GACzDP,EAAWO,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAK,CAACC,GAAID,EAAIC,GAAIhB,QAASe,EAAIE,iBAEnE,IAaH,yBAAKlB,UAAU,OACb,yBAAKA,UAAU,SACb,6BAASmB,UAAY,QAAQC,QAAQ,OAAOC,KAAO,QAAO,2BAAG,2DAE/D,yBAAKJ,GAAG,QAENhB,EAAQc,KAAI,YAAmB,EAAjBE,GAAkB,IAAdhB,EAAa,EAAbA,QAChB,OACE,kBAAC,EAAD,CAASH,IAAKC,EAAUA,SAAUE,EAAQF,SAC1CE,QAASA,EAAQA,cAKvB,yBAAKgB,GAAG,QACP,8BACG,2BAAOK,YAAY,oBAAoBC,SAAU,SAAAC,GAAK,OAAInB,EAAUmB,EAAMC,OAAOC,QAAQA,MAAOtB,IAChG,4BAAQuB,QA5BI,SAACH,GACnBA,EAAMI,iBACN7C,EAAG2B,WAAW,WAAWmB,IAAI,CAC3B5B,QAASG,EACTL,SAAUA,EACV+B,UAAW9C,IAASU,UAAUqC,WAAWC,oBAE3C3B,EAAS,KAqB2B4B,UAAW7B,GAAzC,cCvCU8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMlD,c","file":"static/js/main.d2b842df.chunk.js","sourcesContent":["import React,  {Component} from 'react';\r\n\r\nclass Test extends Component {\r\n\tstate = {\r\n\t\tcount:0\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<button onClick={() => this.setState({count:this.state.count + 1})}>Click Me </button>\r\n\t\t\t\t<p>Counter: {this.state.count}</p>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default Test;","import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyAPN0J22NjgdNBK38vNkuT1Xapq2pWz-cM\",\r\n  authDomain: \"theboss-559e3.firebaseapp.com\",\r\n  databaseURL: \"https://theboss-559e3.firebaseio.com\",\r\n  projectId: \"theboss-559e3\",\r\n  storageBucket: \"theboss-559e3.appspot.com\",\r\n  messagingSenderId: \"559353482363\",\r\n  appId: \"1:559353482363:web:97116e071d70eaed0126de\",\r\n  measurementId: \"G-9NLYRDGQ3X\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db;\r\n","import React from 'react';\r\nimport './Message.css';\r\n\r\nfunction Message (props){\r\n\tconst authUser = props.psr === props.userName\r\n\treturn(\r\n\t\t<div className = 'chat'>\r\n\t\t\t<div className={authUser ? 'chat1' : 'chat2'}>\r\n\t\t\t\t<p><i>{props.userName}</i> : <b><big>{props.message}</big></b></p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default Message;","import React,  {useState, useEffect} from 'react';\nimport './App.css';\nimport Test from './Test.js';\nimport firebase from 'firebase';\nimport db from \"./firebase\";\nimport Message from './Message.js'\n\nfunction App() {\n  const [input, setInput] = useState('');\n  const [message, setMessage] = useState([]);\n  const [userName, setUserName] = useState('');\n\n  useEffect(()=>{\n    setUserName(prompt('Enter Your username'))\n  },[]);\n\n  useEffect(() => {\n        // run once when the app component loads\n    db.collection('message').orderBy('timestamp', 'asc').onSnapshot(snapshot => {\n           setMessage(snapshot.docs.map(doc => ({id: doc.id, message: doc.data()})))\n        });\n    }, []);\n\n  const sendMessage = (event)=> {\n    event.preventDefault();\n    db.collection('message').add({\n      message: input,\n      userName: userName,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    });\n    setInput('');\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"title\">\n        <marquee direction = \"Right\" bgcolor=\"Blue\" text = \"Blue\"><b><h1>The BOSS_ Chatting Group</h1></b></marquee>\n      </div>\n      <div id='div2'>\n      {\n        message.map(({id, message}) => {\n          return (\n            <Message psr={userName} userName={message.userName}\n            message={message.message}/>\n          );\n        })\n      }\n      </div>\n      <div id='div3'>\n       <form>\n          <input placeholder=\"Type your message\" onChange={event => setInput (event.target.value)} value={input}/>\n          <button onClick={sendMessage} disabled={!input}> Send </button>\n      </form>\n      </div>\n    </div>\n  );\n}\nexport default App;\n    \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}